# Generated by Django 3.0.6 on 2021-02-12 15:52

from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Incident',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('your_category', models.CharField(choices=[('Victim', 'Accident victim'), ('Eye nitness', 'Eye witness'), ('Driver', 'Driver of a vehicle in the accident'), ('Other', 'Other')], db_column='User category', max_length=30)),
                ('if_other_category_specify', models.CharField(blank=True, db_column='User other category', max_length=50, null=True)),
                ('accident_location', models.CharField(choices=[('FCT', 'FCT'), ('Abia', 'Abia'), ('Adamawa', 'Adamawa'), ('Akwa Ibom', 'Akwa Ibom'), ('Anambra', 'Anambra'), ('Bauchi', 'Bauchi'), ('Bayelsa', 'Bayelsa'), ('Benue', 'Benue'), ('Borno', 'Borno'), ('Cross River', 'Cross River'), ('Delta', 'Delta'), ('Ebonyi', 'Ebonyi'), ('Enugu', 'Enugu'), ('Edo', 'Edo'), ('Ekiti', 'Ekiti'), ('Gombe', 'Gombe'), ('Imo', 'Imo'), ('Jigawa', 'Jigawa'), ('Kaduna', 'Kaduna'), ('Kano', 'Kano'), ('Katsina', 'Katsina'), ('Kebbi', 'Kebbi'), ('Kogi', 'Kogi'), ('Kwara', 'Kwara'), ('Lagos', 'Lagos'), ('Nasarawa', 'Nasarawa'), ('Niger', 'Niger'), ('Ogun', 'Ogun'), ('Ondo', 'Ondo'), ('Osun', 'Osun'), ('Oyo', 'Oyo'), ('Plateau', 'Plateau'), ('Rivers', 'Rivers'), ('Sokoto', 'Sokoto'), ('Taraba', 'Taraba'), ('Yobe', 'Yobe'), ('Zamfara', 'Zamfara')], max_length=45)),
                ('local_government_area', models.CharField(db_column='LGA', max_length=25)),
                ('address_or_nearest_landmark', models.CharField(help_text='By landmark we mean somewhere notable such as bustop, market, hotel, hospital etc.', max_length=50, verbose_name='address and/or nearest landmark')),
                ('date_of_accident', models.DateField()),
                ('time_of_accident', models.TimeField()),
                ('number_of_vehicles_involved', models.PositiveIntegerField(db_column='vehicles involved', help_text='Number of vehicles can be zero or more.')),
                ('vehicle_type', multiselectfield.db.fields.MultiSelectField(choices=[('Car saloon', 'Car saloon'), ('Microbus', 'Microbus (< 10 seater)'), ('Minibus', 'Minibus (< 15 seater)'), ('Coaster', 'Coaster (< 15 > 35 seater)'), ('Bus', 'Bus (> 35 seater)'), ('Pickup', 'Pickup'), ('SUV', 'SUV (Jeep)'), ('Light lorry', 'Light lorry (< 3.5 t)'), ('Heavy lorry', 'Heavy lorry (> 3.5 t)'), ('Tanker', 'Tanker'), ('Trailer', 'Trailer'), ('Motorcycle', 'Motorcycle'), ('Tricycle', 'Tricycle'), ('Bicycle', 'Bicycle'), ('Unknown', 'Unknown'), ('Other', 'Other')], max_length=50)),
                ('if_other_vehicle_specify', models.CharField(blank=True, db_column='other vehicle type', max_length=50, null=True)),
                ('vehicles_number_plates', models.CharField(blank=True, help_text='You can add more than one vehicle number plate seperated by a comma.', max_length=100, null=True)),
                ('vehicles_precrash_factors', multiselectfield.db.fields.MultiSelectField(choices=[('Tyre burst', 'Tyre burst'), ('Mechanical deficiency', 'Mechanical deficiency'), ('Overloaded', 'Overloaded'), ('Defective light', 'Defective light'), ('Nothing notable', 'Nothing notable')], help_text='This field is required', max_length=50)),
                ('road_geometry', models.CharField(choices=[('Straight road', 'Straight road'), ('Curve', 'Curve'), ('Roundabout', 'Roundabout'), ('T-junction', 'T-junction'), ('Y-junction', 'Y-junction'), ('+-junction', '+-junction'), ('Bridge', 'Bridge'), ('Road works', 'Road works'), ('Other', 'Other')], max_length=30)),
                ('road_type', models.CharField(choices=[('Dual carriageway', 'Dual carriageway'), ('Single carriageway', 'Single carriageway'), ('Expressway', 'Expressway'), ('Street', 'Street'), ('Other', 'Other')], max_length=30)),
                ('driver_precrash_factors', multiselectfield.db.fields.MultiSelectField(choices=[('Nothing notable', 'Nothing notable'), ('Fatigue/Sleepiness', 'Fatigue/Sleepiness'), ('Sudden illness', 'Sudden illness'), ('Speeding', 'Speeding'), ('Careless overtaking', 'Careless overtaking'), ('Tailgating', 'Tailgating'), ('Sudden turn', 'Sudden turn'), ('risktaking', 'Other calculated risktaking'), ('phone while driving', 'Use of phone while driving'), ('Alcohol', 'Influence of alcohol'), ('Drug', 'Influence of drug'), ('Other distractions', 'Other distractions/inattentiveness')], help_text='This field is required', max_length=50)),
                ('collision_type', models.CharField(choices=[('Mv/mv head on', 'Moving vehicles, head on'), ('Mv/mv rear end', 'Moving vehicles, rear end'), ('Mv/mv intersecting', 'Moving vehicles, intersecting'), ('Mv/mv overtake', 'Moving vehicles, overtake'), ('Mv/mv turn', 'Moving vehicles, turn'), ('Single mv hit object', 'Single moving vehicle, hit object'), ('Single mv run off', 'Single moving vehicle, run off'), ('Single mv falling off', 'Single moving vehicle, falling off'), ('Mv/pedestrian', 'Moving vehicle with pedestrian'), ('Mv/motorcyclist', 'Moving vehicle with motorcyclist'), ('Mv/bicyclist', 'Moving vehicle with bicyclist'), ('Other', 'Other')], max_length=70)),
                ('number_of_victims', models.PositiveIntegerField(help_text='Number of victims can be zero or more.')),
                ('number_of_injured', models.PositiveIntegerField(help_text='Number of injured can be zero or more.')),
                ('number_of_deaths', models.PositiveIntegerField(help_text='Number of dead can be zero or more.')),
                ('category_of_victims', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Driver', 'Driver'), ('Passenger', 'Passenger'), ('Motorcycle', 'Motorcyclist'), ('Tricyclist', 'Tricyclist'), ('Bicyclist', 'Bicyclist'), ('Pedestrian', 'Pedestrian')], help_text='If no victim, leave boxes unticked.', max_length=40, null=True)),
                ('victims_age_group', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('Baby', 'Baby'), ('Toddler', 'Toddler'), ('Child', 'Child'), ('Teenager', 'Teenager'), ('Adult', 'Adult'), ('Middle aged', 'Middle aged'), ('Elderly', 'Elderly')], help_text='If no victim, leave boxes unticked.', max_length=50, null=True)),
                ('number_of_male_victims', models.PositiveIntegerField(help_text='Number of male victims can be zero or more.')),
                ('number_of_female_victims', models.PositiveIntegerField(help_text='Number of female victims can be zero or more')),
                ('number_of_child_victims', models.PositiveIntegerField(help_text='Number of child victims can be zero or more')),
                ('victims_current_location', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[(1, 'Accident Scene'), (2, 'Hospital'), (3, 'Other')], help_text='If no victim, leave box unticked.', max_length=50, null=True)),
                ('if_hospital_specify', models.CharField(blank=True, db_column='hospital location', max_length=50, null=True)),
                ('if_other_location_specify', models.CharField(blank=True, db_column='other location', max_length=50, null=True)),
                ('more_accident_info', models.TextField(blank=True, null=True)),
                ('videofile', models.FileField(blank=True, null=True, upload_to='videos/', verbose_name='upload a video or an image')),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('statename', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('local_government_area', models.CharField(db_column='LGA', max_length=25)),
                ('address_or_nearest_landmark', models.CharField(help_text='By landmark we mean somewhere notable such as bustop, market, hotel, hospital etc.', max_length=50, verbose_name='address and/or nearest landmark')),
                ('content', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('imagefile', models.FileField(blank=True, null=True, upload_to='images/', verbose_name='upload an image')),
                ('slug', models.SlugField(max_length=200, unique=True)),
                ('accident_location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='usersapp.State')),
            ],
            options={
                'ordering': ['created_on'],
            },
        ),
    ]
